#ifndef GAME_HPP  
#define GAME_HPP  

#include "lander.hpp"  
#include "Terrain.hpp"  
#include <vector>  
#include "Solution.hpp"
class Game {  
public:  
    std::vector<std::pair<int, int> > terrainPoints;
    int init_power;
    int init_angle;
    int lander_x, lander_y;
    Game();  
    void run(std::vector<std::pair<int, int> > &terrainPoints, int power, int angle);  
    void processInput(); // Updated to use your solution  
    void update(float dt);  
    void render();
    Terrain terrain;
private:  

    Lander lander;
    bool gameOver;  
    int gen_limit;
    int currect_generation;
    // MLX42 variables  
    mlx_t* mlx;  
    mlx_image_t* img; 
    std::vector<std::vector<s_action> > action_list;
    // Action sequence and state  
    std::vector<s_action> actions; // Sequence of actions generated by your solution  
    int currentActionIndex;       // Index of the current action being executed  
    int actionSize;               // Number of actions in the sequence  

    // Helper methods  
    void generateActions();       // Generate actions using your solution  
};  

#endif  